#!/usr/bin/python
import subprocess
import optparse
import urllib
import os
import shutil
import platform

def downloadFile(url, cwd):
    target = urllib.URLopener()
    target.retrieve(url, cwd)

def checkCreateDir(dir):
    if not os.path.exists(dir):
        os.makedirs(dir)

# def updateAntigen(curdir):
#     antigenurl = "https://raw.githubusercontent.com/zsh-users/antigen/master/bin/antigen.zsh"

#     downloadFile(antigenurl, curdir + "/antigen.zsh")

def diffDirectories(orig, mirror):
    result = [[],[]]

    for i in range(len(orig)):
        if orig[i] in mirror:
            result[0].append(i)
            result[1].append(mirror.index(orig[i]))

    return result

def fakeDotFiles(dirlist):
    result = []

    for f in dirlist:
        if f[0] == '.':
            result.append(f[1:])
        else:
            result.append(f)

    return result

def symlinkFolder(orig, dest, convert2DotFiles = False, filterList = [], filterExt = []):
    origList = os.listdir(orig)
    destList = os.listdir(dest)

    if len(filterList) > 0:
        for f in filterList:
            if f in origList:
                    origList.remove(f)

    if len(filterExt) > 0:
        for f in origList:
            if f[-4:] in filterExt:
                origList.remove(f)


    existingFiles = []

    if convert2DotFiles:
        existingFiles = diffDirectories(origList, fakeDotFiles(destList))
    else:
        existingFiles = diffDirectories(origList, destList)

    for f in origList:
        if origList.index(f) not in existingFiles[0]:
            curPos = ''
            if convert2DotFiles:
                curPos = os.path.join(dest, "." + f)
            else:
                curPos = os.path.join(dest, f)
            linkPos = os.path.join(orig, f)

            os.symlink(linkPos, curPos)
            print("Symlink created: " + curPos)

    for i in range(len(existingFiles[0])):
        curPos = os.path.join(dest, destList[existingFiles[1][i]])
        linkPos = os.path.join(orig, origList[existingFiles[0][i]])

        while True:
            print(curPos + " alredy exists in your home directory!")
            input = raw_input("Would you to substitute the existing file/directory? (y/n):\n").lower()

            if input == "n":
                break
            elif input == "y":
                try:
                    if os.path.islink(curPos) or os.path.isfile(curPos):
                        os.remove(curPos)
                    else:
                        shutil.rmtree(curPos)
                except OSError as e:
                    print(e)

                os.symlink(linkPos, curPos)
                print(curPos + " created.")
                break
            else:
                print("Invalid answer. What do you mean? (y/n)")
                continue

def main():
    parser = optparse.OptionParser()

    parser.add_option("-u", "--update",
                  dest="update", default=True,
                  action="store_true",
                  help="updates all the dotfiles [default]")

    parser.add_option("-s", "--setup",
                  dest="update",
                  action="store_false",
                  help="set symlinks in home directory")

    (opts, args) = parser.parse_args()

    if len(args) > 0:
        parser.error("Incorrect usage. Check help with --help.")

    if opts.update:
        # print("Updating antigen..."

        # curdir = os.environ['DOTFILES']
        # updateAntigen(curdir)

        # print("...Done!"

        print("Updating main...")

        subprocess.check_call(["git", "pull"])

        print("...Done!")

    else:
        print("Symlinking dotfiles...")

        filterList = [".DS_Store", ".git", ".gitignore", ".history", "antibody", "winconf", "sh", "readme.md", "ssh"]
        filterExt = []
        symlinkFolder(os.environ['DOTFILES'], os.environ['HOME'], True, filterList, filterExt)

        print("...Done!")

        if platform.system() == 'Darwin':
            print("Symlinking lauch daemon updating job...")

            os.symlink(os.path.join(os.environ['DOTFILES'], 'macconf', 'com.rightright.dotfiles.plist'),
                os.path.join(os.environ['HOME'], 'Library/LaunchAgents/com.rightright.dotfiles.plist'))

            print("...Done!")

if __name__ == "__main__":
    os.chdir(os.environ['DOTFILES'])
    main()
