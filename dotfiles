#!/usr/bin/env python
import subprocess
import optparse
import urllib
import os

def downloadFile(url, cwd):
    target = urllib.URLopener()
    target.retrieve(url, cwd)

def checkCreateDir(dir):
    if not os.path.exists(dir):
        os.makedirs(dir)

def updatePathogen(curdir):
    pathogendir = curdir + "/vim/autoload/"
    pathogenurl = "https://raw.githubusercontent.com/tpope/vim-pathogen/master/autoload/pathogen.vim"

    checkCreateDir(pathogendir)
    downloadFile(pathogenurl, pathogendir + "/pathogen.vim")

def main():
    parser = optparse.OptionParser()

    parser.add_option("-u", "--update",
                  dest="update", default=True,
                  action="store_true",
                  help="updates all the dotfiles [default]")

    parser.add_option("-s", "--setup",
                  dest="update",
                  action="store_false",
                  help="set symlinks in home directory")

    (opts, args) = parser.parse_args()

    if len(args) > 0:
        parser.error("Incorrect usage. Check help with --help.")

    if opts.update:
        print "Updating pathogen..."

        curdir = os.environ['DOTFILES']
        updatePathogen(curdir)

        print "...Done!"

        print "Updating submodules..."

        subprocess.check_call(["git", "submodule", "update"])

        print "...Done!"

        print "Updating main..."

        subprocess.check_call(["git", "pull"])

        print "...Done!"

    else:
        print "Init pathogen..."

        curdir = os.environ['DOTFILES'] if os.environ['DOTFILES'] else os.path.join(os.environ['HOME'], ".dotfiles")
        updatePathogen(curdir)

        print "...Done!"

        print "Init submodules..."

        subprocess.check_call(["git", "submodule", "init"])

        print "...Done!"

        print "Symlinking dotfiles..."

        homedir = os.environ['HOME']
        exclude = ["dotfiles", "upgrade_dotfiles"]

        files = [f for f in os.listdir(curdir) if f[0] != "."]
        for f in files:
            if f not in exclude:
                fpos = os.path.join(curdir, f)
                ftype = ""
                while True:
                    if os.path.isfile(fpos) == True or os.path.islink(fpos) == True:
                        ftype = "file"
                        print "Substituting file: " + f
                        input = raw_input("Would you to substitute the existing file/symlink? (y/n) ").lower()
                    elif os.path.isdir(fpos) == True:
                        ftype = "dir"
                        print "Substituting directory: " + f
                        input = raw_input("Would you to substitute the existing directory? (y/n) ").lower()
                    else :
                        raise Exception('The existing filetype is unknown.')

                    if input == "n":
                        break
                    elif input == "y":
                        if ftype == "file":
                            os.remove(fpos)

                        if ftype == "dir":
                            os.rmtree(fpos)

                        dst = "." + f
                        os.symlink(fpos, os.path.join(homedir, dst))
                        break

        print "...Done!"

if __name__ == "__main__":
    main()
